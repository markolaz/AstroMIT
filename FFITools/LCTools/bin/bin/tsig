#!/usr/bin/env python
#
# Copyright (C) 2017 - Massachusetts Institute of Technology (MIT)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import logging
import numpy.random
import optparse
import os
import sys

DIR = os.path.abspath(os.path.dirname(__file__))
sys.path.insert(0, os.path.join(DIR, '..'))

import tsig
import tsig.catalog
import tsig.spacecraft
import tsig.observation

from tsig.util.configurable import Configuration


if __name__ == "__main__":
    usage = """%prog --config filename.cfg"""
    parser = optparse.OptionParser(usage=usage)
    parser.add_option("--version", action="store_true",
                      help="display the version")
    parser.add_option("-c", "--config", dest="config_file",
                      metavar="CONFIG_FILE",
                      help="configuration file")
    parser.add_option("-l", "--log", dest="log_file", metavar="LOG_FILE",
                      help="log file")
    parser.add_option("-d", "--debug", action="store_true",
                      help="emit extra diagnostic information to log")
    parser.add_option("-s", "--seed", dest="seed", type=int,
                      help="seed for random number generator")

    (options, args) = parser.parse_args()

    if options.version:
        print "tsig version %s" % tsig.__version__
        sys.exit(0)

    tsig.setup_logging(debug=options.debug, filename=options.log_file)
    logger = logging.getLogger(__name__)

    if options.seed is not None:
        logger.info("using random seed %s" % options.seed)
        numpy.random.seed(options.seed)

    # get the configuration
    cfg = Configuration(options.config_file)

    # create a catalog, default to TIC
    try:
        cat_type = cfg.get('catalog', 'TIC')
        cat = getattr(tsig.catalog, cat_type)(cfg)
    except AttributeError:
        logger.error("catalog type not found: %s" % cat_type)
        sys.exit(2)

    # create the spacecraft
    spacecraft = tsig.spacecraft.Spacecraft(cfg)

    # get the mission profile
    mission = tsig.observation.MissionProfile(
        filename=cfg.get('mission_profile', None),
        pointing=cfg.get('mission_pointing', None),
        position=cfg.get('spacecraft_position', None),
        velocity=cfg.get('spacecraft_velocity', None),
    )

    # set up the observation, then do it
    observation = tsig.observation.Observation(**cfg)
    observation.set_spacecraft(spacecraft)
    observation.set_catalog(cat)
    observation.set_mission(mission)
    observation.observe()
