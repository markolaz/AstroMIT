#!/usr/bin/env python
#
# Copyright (C) 2017 - Massachusetts Institute of Technology (MIT)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
"""
Load either a matplot file and extract each of the PSF/PSF images with meta
data or a fits file and compile the meta data from the filename
(not available in the headers as with the mat file)
"""

import os
import sys
import logging
from argparse import ArgumentParser, ArgumentTypeError, RawTextHelpFormatter

DIR = os.path.abspath(os.path.dirname(__file__))
sys.path.insert(0, os.path.join(DIR, '..'))

import tsig
from tsig.psf import SpreadFunctions
from tsig.prnu import PhotoResponse

if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument("files", nargs="+", metavar="FILES",
            help="Input PSF matplot file or PRNU fits file.")
    parser.add_argument("-l", "--log", dest="log_file", type=str,
                        metavar="LOG_FILE",
                        help="log file")
    parser.add_argument("-d", "--debug", action="store_true",
                        help="emit extra diagnostic information to log")
    args = parser.parse_args()

    tsig.setup_logging(debug=args.debug, filename=args.log_file)
    logger = logging.getLogger(__name__)

    types = {
      '.mat': SpreadFunctions(),
      '.fits': PhotoResponse(),
    }

    imported = set()
    for fn in args.files:
        for ext, db in types.items():
            if fn.endswith(ext):
                if db.add_file(fn):
                    imported.add(fn)

        if fn not in imported:
            logger.error("Filename invalid: %s" % fn)


