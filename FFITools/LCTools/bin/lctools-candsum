#!/usr/bin/env python
# Copyright (C) 2017 - Massachusetts Institute of Technology (MIT) 
# 
# This program is free software: you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published by 
# the Free Software Foundation, either version 3 of the License, or 
# (at your option) any later version. 
# 
# This program is distributed in the hope that it will be useful, 
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
# GNU General Public License for more details. 
# 
# You should have received a copy of the GNU General Public License 
# along with this program.  If not, see <http://www.gnu.org/licenses/>. 

# This is a tool to generate one page summary of a candidate



import ConfigParser
import optparse
import logging
import sys
import os
import numpy as np

import tsig
from tsig.lightcurve import ASCIILightCurve as Lc

DIR = os.path.abspath(os.path.dirname(__file__))
sys.path.insert(0, os.path.join(DIR, '..'))

import lctools
from lctools.util.configurable import Configuration
from lctools.report import Summary
def cmd_parse():
    p = optparse.OptionParser()

    p.add_option('--version', action="store_true", help="dislay the version ")
    p.add_option('--config', '-c', dest="config_file", type=str, metavar="CONFIG_FILE", help='the filename of configuration file that contains '
                      'contains parameter settings(Optional)')


    p.add_option('--nprocs', '-n', default=3, help='the number of processors to use when run the code with multiprocessing, default is 3, when set to 1, turn off multiprocessing')
    
    p.add_option('--overwrite', '-r', default=False, action='store_true',
                 help='the flag to allow replacing existing files')
    
    p.add_option('--logfile', default='example.log', 
                 help='The destination of the log file (this is disabled when using multiple cores since multiprocessing does not take file handeler, output to stdout for now), - outputs the logs to stdout')
    p.add_option('--debug', action='store_true', help='output debug level message')
    p.add_option('--plot-to-file', '-p', default=False, action='store_true', help='Store the diagnostic plots in a file.')
    options, arguments = p.parse_args()
    return options


def get_default_keys():
    default_dict = dict({'inlist':'', 'coljd':1, 'colmag':2, 'indir':''})
    return default_dict
 

if __name__ == '__main__':
    options = cmd_parse()

    if int(options.nprocs)==1:
        multi = False
    else:
        multi = True
        import multiprocessing
        from multiprocessing import Pool
       

    if options.version:
        print "lctool version %s" % LCTools.__version__
        sys.exit(0)
    lctools.setup_logging(debug=options.debug, filename=options.logfile, multi=multi)
    logger = logging.getLogger(__name__)
    cfg = Configuration(options.config_file)
    replace = options.overwrite
    nps = int(options.nprocs)
    default_report_dict = get_default_keys() 
    infile = cfg.get('LC', default_report_dict).get('infile', '')
    if infile=='':
        logger.warning('can not find a input file in configure file Section LC, will try to read inlist as the input') 
        inlist = cfg.get('LC', default_report_dict).get('inlist', '') 
        
    indir = cfg.get('LC', default_report_dict).get('indir', '') 

    outdir = cfg.get('LC', default_report_dict).get('outdir', indir)
    blsanalf = cfg.get('BLS', default_report_dict).get('analfile', '.blsanal') 

    outext = cfg.get('LC', default_report_dict).get('outext', '_ltf.lc')

    if not infile == '':
        ltffile = os.path.splitext(infile)[0]+outext
        lc = Lc().create_lightcurve(indir+ltffile,cfgfile=options.config_file) 
        lc.load_from_file()
        blsanal = outdir + '_'.join(os.path.splitext(os.path.basename(lc.name))[0].split('_')[:]) + blsanalf
        report_eng = Summary(lc, blsanal)
        report_eng.gen_summary(plottofile=options.plot_to_file)

    elif not inlist == '':
        for line in open(inpath+inlist).readlines():
            name = line.rstrip()
            ltffile = os.path.splitext(name)[0]+outext
            lc = Lightcurve().create_lightcurve(inpath+ltffile,cfgfile=cfgfile) 
            blsanal = outpath + '_'.join(os.path.splitext(os.path.basename(lc.name))[0].split('_')[:]) + blsanalf
            report_eng.gen_summary(lc, blsanal, plottofile=options.plot_to_file)



